// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: token.proto

package token

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Token contains all the lexical tokens for the GraphQL IDL
type Token int32

const (
	UNKNOWN     Token = 0
	ERR         Token = 1
	EOF         Token = 2
	COMMENT     Token = 3
	DESCRIPTION Token = 4
	IDENT       Token = 5
	STRING      Token = 6
	INT         Token = 7
	FLOAT       Token = 8
	BOOL        Token = 9
	NULL        Token = 10
	AND         Token = 11
	OR          Token = 12
	NOT         Token = 13
	AT          Token = 14
	VAR         Token = 15
	ASSIGN      Token = 16
	LPAREN      Token = 17
	LBRACK      Token = 18
	LBRACE      Token = 19
	COMMA       Token = 20
	PERIOD      Token = 21
	RPAREN      Token = 22
	RBRACK      Token = 23
	RBRACE      Token = 24
	COLON       Token = 25
	PACKAGE     Token = 26
	SCHEMA      Token = 27
	TYPE        Token = 28
	SCALAR      Token = 29
	ENUM        Token = 30
	INTERFACE   Token = 31
	IMPLEMENTS  Token = 32
	UNION       Token = 33
	INPUT       Token = 34
	EXTEND      Token = 35
	DIRECTIVE   Token = 36
	ON          Token = 37
)

var Token_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "ERR",
	2:  "EOF",
	3:  "COMMENT",
	4:  "DESCRIPTION",
	5:  "IDENT",
	6:  "STRING",
	7:  "INT",
	8:  "FLOAT",
	9:  "BOOL",
	10: "NULL",
	11: "AND",
	12: "OR",
	13: "NOT",
	14: "AT",
	15: "VAR",
	16: "ASSIGN",
	17: "LPAREN",
	18: "LBRACK",
	19: "LBRACE",
	20: "COMMA",
	21: "PERIOD",
	22: "RPAREN",
	23: "RBRACK",
	24: "RBRACE",
	25: "COLON",
	26: "PACKAGE",
	27: "SCHEMA",
	28: "TYPE",
	29: "SCALAR",
	30: "ENUM",
	31: "INTERFACE",
	32: "IMPLEMENTS",
	33: "UNION",
	34: "INPUT",
	35: "EXTEND",
	36: "DIRECTIVE",
	37: "ON",
}

var Token_value = map[string]int32{
	"UNKNOWN":     0,
	"ERR":         1,
	"EOF":         2,
	"COMMENT":     3,
	"DESCRIPTION": 4,
	"IDENT":       5,
	"STRING":      6,
	"INT":         7,
	"FLOAT":       8,
	"BOOL":        9,
	"NULL":        10,
	"AND":         11,
	"OR":          12,
	"NOT":         13,
	"AT":          14,
	"VAR":         15,
	"ASSIGN":      16,
	"LPAREN":      17,
	"LBRACK":      18,
	"LBRACE":      19,
	"COMMA":       20,
	"PERIOD":      21,
	"RPAREN":      22,
	"RBRACK":      23,
	"RBRACE":      24,
	"COLON":       25,
	"PACKAGE":     26,
	"SCHEMA":      27,
	"TYPE":        28,
	"SCALAR":      29,
	"ENUM":        30,
	"INTERFACE":   31,
	"IMPLEMENTS":  32,
	"UNION":       33,
	"INPUT":       34,
	"EXTEND":      35,
	"DIRECTIVE":   36,
	"ON":          37,
}

func (x Token) String() string {
	return proto.EnumName(Token_name, int32(x))
}

func (Token) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3aff0bcd502840ab, []int{0}
}

func init() {
	proto.RegisterEnum("gqlc.protobuf.Token", Token_name, Token_value)
}

func init() { proto.RegisterFile("token.proto", fileDescriptor_3aff0bcd502840ab) }

var fileDescriptor_3aff0bcd502840ab = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x91, 0x4d, 0x92, 0xd3, 0x30,
	0x10, 0x85, 0x87, 0x49, 0x6c, 0x4f, 0x64, 0x32, 0xf3, 0x10, 0xff, 0x01, 0xc2, 0xff, 0x86, 0x05,
	0x1b, 0x4e, 0xa0, 0xd8, 0x9d, 0xa0, 0x8a, 0xdc, 0x72, 0xc9, 0x72, 0xf8, 0x59, 0x86, 0x82, 0x2c,
	0xa0, 0x30, 0x50, 0xe1, 0x0e, 0xdc, 0x83, 0x63, 0x70, 0x39, 0xaa, 0xe5, 0xaa, 0xec, 0x3e, 0xbf,
	0xd6, 0x7b, 0x72, 0x3f, 0xa9, 0xf2, 0x38, 0x7c, 0xfd, 0xfc, 0xfd, 0xf5, 0x8f, 0x5f, 0xc3, 0x71,
	0xd0, 0xf3, 0xc3, 0xcf, 0x6f, 0x9f, 0x46, 0xde, 0xff, 0xfe, 0xb2, 0x50, 0x87, 0xe1, 0x30, 0x8c,
	0x9f, 0xaf, 0xfe, 0x4d, 0x54, 0x16, 0xe5, 0xa8, 0x2e, 0x55, 0xd1, 0xf3, 0x96, 0xfd, 0x3b, 0xc6,
	0x99, 0x2e, 0xd4, 0x84, 0x42, 0xc0, 0xb5, 0x04, 0x7e, 0x8d, 0x73, 0x19, 0x57, 0xbe, 0x69, 0x88,
	0x23, 0x26, 0xfa, 0x4a, 0x95, 0x35, 0x75, 0x55, 0xb0, 0x6d, 0xb4, 0x9e, 0x31, 0xd5, 0x33, 0x95,
	0xd9, 0x5a, 0x66, 0x99, 0x56, 0x2a, 0xef, 0x62, 0xb0, 0xbc, 0x41, 0x2e, 0x6e, 0xcb, 0x11, 0x85,
	0xcc, 0xd7, 0xce, 0x9b, 0x88, 0x0b, 0x7d, 0xa1, 0xa6, 0x2b, 0xef, 0x1d, 0x66, 0x42, 0xdc, 0x3b,
	0x07, 0x25, 0xe7, 0x0c, 0xd7, 0x28, 0x75, 0xae, 0xce, 0x7d, 0xc0, 0x75, 0x11, 0xd8, 0x47, 0xcc,
	0x45, 0x30, 0x11, 0x97, 0x22, 0xec, 0x4c, 0xc0, 0x95, 0xc4, 0x9b, 0xae, 0xb3, 0x1b, 0x06, 0x84,
	0x5d, 0x6b, 0x02, 0x31, 0x6e, 0x24, 0x5e, 0x05, 0x53, 0x6d, 0xa1, 0x4f, 0x4c, 0xb8, 0x29, 0x37,
	0xcb, 0x7f, 0x1b, 0xdc, 0x12, 0xb9, 0xa5, 0x60, 0x7d, 0x8d, 0xdb, 0xc2, 0x61, 0xb4, 0xde, 0x49,
	0x3c, 0x5a, 0xef, 0x9e, 0x98, 0x70, 0x6f, 0xb4, 0x3a, 0xcf, 0xb8, 0x2f, 0xdb, 0xb7, 0xa6, 0xda,
	0x9a, 0x0d, 0x61, 0x91, 0x36, 0xac, 0xde, 0x52, 0x63, 0xf0, 0x40, 0x76, 0x88, 0x1f, 0x5a, 0xc2,
	0xc3, 0x51, 0x35, 0xce, 0x04, 0x3c, 0x12, 0x95, 0xb8, 0x6f, 0xb0, 0xd4, 0x73, 0x35, 0xb3, 0x1c,
	0x29, 0xac, 0x25, 0xf2, 0xb1, 0xbe, 0x54, 0xca, 0x36, 0xad, 0x23, 0xe9, 0xb1, 0xc3, 0x13, 0xb9,
	0xa2, 0x67, 0xa9, 0xf0, 0x69, 0xaa, 0x90, 0xdb, 0x3e, 0xe2, 0x99, 0x44, 0xd1, 0xfb, 0x48, 0x5c,
	0xe3, 0xb9, 0x04, 0xd4, 0x36, 0x50, 0x15, 0xed, 0x8e, 0xf0, 0x22, 0x15, 0xc4, 0x78, 0xb9, 0x98,
	0xfe, 0xf9, 0xbb, 0x3c, 0x5b, 0x15, 0x1f, 0xb3, 0xf4, 0xce, 0xfb, 0x3c, 0xbd, 0xe6, 0x9b, 0xff,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x49, 0x75, 0x58, 0xf7, 0x01, 0x00, 0x00,
}
