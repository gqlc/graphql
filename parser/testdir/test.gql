# Top level comment

import (
    # Internal documentation

    "one.gql"

    # Another internal documentation
    "two.gql"
)

"Schema description"
schema @one @two() @three(a: "A") {
    "Query description"
    query: Query

    "Mutation description"
    mutation: Mutation

    "Subscription description"
    subscription: Subscription
}

"Scalar description"
scalar Test @one @two() @three(a: 1, b: 2, c: 3)

"Object description"
type Test implements One & Two @one @two() @three(a: 1, b: 2) {
    "Field description"
    one: One

    "Field description"
    two(
        """
        Arg description
        """
        one: One = 1 @one
    ): Two @one @two

    "Field description"
    three(
        """
        Arg description
        """
        one: One = 1 @one,

        """
        Arg description
        """
        two: Two = 2 @one @two(),

        """
        Arg description
        """
        three: Three = 3 @one @two() @three(a: 1, b: 2),
    ): Three @one @two() @three(a: 1, b: 2)
}

"Interface description"
interface Test @one @two() @three(a: 1, b: 2) {
    "Field description"
    one: One

    "Field description"
    two(
        """
        Arg description
        """
        one: One = 1 @one
    ): Two @one @two

    "Field description"
    three(
        """
        Arg description
        """
        one: One = 1 @one,

        """
        Arg description
        """
        two: Two = 2 @one @two(),

        """
        Arg description
        """
        three: Three = 3 @one @two() @three(a: 1, b: 2),
    ): Three @one @two() @three(a: 1, b: 2)
}

"Union description"
union Test @one @two() @three(a: 1, b: 2) = One | Two | Three

"Enum description"
enum Test @one @two {
    "One before" ONE @one

    """
    Two above
    """
    TWO	@one @two

    "Three above"
    "Three before" THREE @one @two @three
}

"Input description"
input Test @one @two {
    "One above"
    "One before" one: One @one

    """
    Two multi above
    """
    "Two single above"
	"Two before" two: Two = 2 @one @two
}

"Directive description"
directive @test(
        """
        Arg description
        """
        one: One = 1 @one,
        """
        Arg description
        """
        two: Two = 2 @one @two,
    ) on SCHEMA | QUERY | MUTATION | SUBSCRIPTION | FIELD